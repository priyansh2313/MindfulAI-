import React, { useRef, useState } from 'react';
import { useLocation } from 'react-router-dom';

export default function VoiceAssistant() {
  const location = useLocation();
  const [selectedLang, setSelectedLang] = useState('en');
  const [listening, setListening] = useState(false);
  const recognitionRef = useRef<any>(null);
  const [answer, setAnswer] = useState('');
  // Always show voice buttons
  const showVoiceButtons = true;

  // Context-aware help text (with translations)
  let helpText = "Welcome to your dashboard. You can check your mood, view recommendations, or talk to our assistant. If you need help, press this button again.";
  if (selectedLang === 'hi') {
    helpText = "‡§Ü‡§™‡§ï‡•á ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•Ç‡§° ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è, ‡§§‡•ã ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§á‡§∏ ‡§¨‡§ü‡§® ‡§ï‡•ã ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§";
  } else if (selectedLang === 'bn') {
    helpText = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÅ‡¶° ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶á ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§";
  }
  if (location.pathname.includes('journal')) {
    helpText = selectedLang === 'hi'
      ? "‡§Ü‡§™ ‡§Ö‡§™‡§®‡•Ä ‡§°‡§æ‡§Ø‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§≤‡§ø‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§∂‡§æ‡§Ç‡§§‡§ø‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§∏‡•Å‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
      : selectedLang === 'bn'
        ? "‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶∞‡ßç‡¶®‡¶æ‡¶≤‡ßá ‡¶Ü‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶¨‡¶æ ‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ‡¶§ ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§"
        : "You are in your journal. You can write your thoughts or listen to calming music.";
  } else if (location.pathname.includes('community')) {
    helpText = selectedLang === 'hi'
      ? "‡§Ü‡§™ ‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Æ‡§æ‡§Ç‡§ó ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
      : selectedLang === 'bn'
        ? "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶¨‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ö‡¶æ‡¶á‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§"
        : "You are in the community chat. You can connect with others or ask for support.";
  } else if (location.pathname.includes('evaluation')) {
    helpText = selectedLang === 'hi'
      ? "‡§Ü‡§™ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§∞ ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§≤‡§æ‡§à ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
      : selectedLang === 'bn'
        ? "‡¶Ü‡¶™‡¶®‡¶ø ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶® ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶® ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§"
        : "You are on the evaluation page. You can take a quick assessment to check your well-being.";
  }

  // Polly TTS function
  const playPollyTTS = async (text: string, lang: string) => {
    try {
      const res = await fetch('http://localhost:5001/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, lang })
      });
      if (!res.ok) throw new Error('Polly error');
      const blob = await res.blob();
      const url = URL.createObjectURL(blob);
      const audio = new Audio(url);
      audio.play();
    } catch (err) {
      alert('Could not play audio. Please check your connection to the TTS server.');
    }
  };

  // Speak helper (now uses Polly)
  const speak = (text: string) => {
    playPollyTTS(text, selectedLang);
  };

  // Voice Q&A logic (English only for now)
  const commonQuestions: { [key: string]: string } = {
    'how do i check my mood': 'To check your mood, press the Mood Check button in the features section.',
    'how do i talk to assistant': 'To talk to the assistant, press the chat icon at the bottom right.',
    'how do i write journal': 'To write in your journal, press the Journal button in the features section.',
    'how do i listen to music': 'To listen to music, press the Peaceful Music button in the features section.',
    'how do i join community': 'To join the community chat, press the Community Chat button in the features section.'
  };

  const startListening = () => {
    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
      setAnswer('Sorry, your browser does not support speech recognition.');
      return;
    }
    setAnswer('');
    setListening(true);
    // @ts-ignore
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = selectedLang === 'en' ? 'en-US' : selectedLang === 'hi' ? 'hi-IN' : 'bn-IN';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript.toLowerCase();
      let found = false;
      for (const q in commonQuestions) {
        if (transcript.includes(q)) {
          setAnswer(commonQuestions[q]);
          speak(commonQuestions[q]);
          found = true;
          break;
        }
      }
      if (!found) {
        setAnswer('Sorry, I did not understand. Please try again or ask a different question.');
        speak('Sorry, I did not understand. Please try again or ask a different question.');
      }
      setListening(false);
    };
    recognition.onerror = () => {
      setAnswer('Sorry, there was a problem with speech recognition.');
      setListening(false);
    };
    recognitionRef.current = recognition;
    recognition.start();
  };

  return (
    <div>
      {/* Show voice buttons and dropdown only after scroll */}
      {showVoiceButtons && (
        <>
          {/* Language selection dropdown only */}
          <div style={{ position: 'fixed', left: 32, bottom: 110, zIndex: 1000, background: '#fff', borderRadius: 12, padding: 8, border: '2px solid #222' }}>
            <label htmlFor="lang-select" style={{ fontWeight: 600, marginRight: 8 }}>Language:</label>
            <select
              id="lang-select"
              value={selectedLang}
              onChange={e => setSelectedLang(e.target.value)}
              style={{ fontSize: '1rem', padding: 4 }}
            >
              <option value="en">English</option>
              <option value="hi">Hindi</option>
              <option value="bn">Bengali</option>
            </select>
          </div>
          {/* Main Voice Help button */}
          <button
            onClick={() => speak(helpText)}
            style={{
              position: 'fixed',
              bottom: 32,
              left: 32,
              zIndex: 1000,
              background: '#111',
              color: '#fff',
              fontSize: '1rem',
              padding: '0.5rem 1rem',
              borderRadius: '1rem',
              border: '2px solid #222',
              boxShadow: '0 4px 16px rgba(0,0,0,0.12)',
              cursor: 'pointer',
              fontWeight: 600,
              letterSpacing: 1,
            }}
            aria-label="Voice Help"
          >
            üó£Ô∏è Voice Help
          </button>
          {/* Voice Q&A button */}
          
        </>
      )}
      {/* Q&A answer display */}
      {answer && (
        <div style={{
          position: 'fixed',
          left: 15,
          bottom: 90,
          zIndex: 1000,
          background: '#fff',
          color: '#222',
          fontSize: '1.1rem',
          padding: '0.8rem 1.5rem',
          borderRadius: '1rem',
          border: '2px solid #222',
          boxShadow: '0 4px 16px rgba(0,0,0,0.12)',
          fontWeight: 500,
          maxWidth: 400,
        }}>
          {answer}
        </div>
      )}
    </div>
  );
} 